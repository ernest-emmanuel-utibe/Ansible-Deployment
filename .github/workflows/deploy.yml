name: Deploy to AWS EC2

on:
  push:
    branches:
      - master  # Triggers on push to master branch
      

jobs:
  deploy:
    runs-on: ubuntu-latest

    steps:
      # Step 1: Checkout the code
      - name: Checkout code
        uses: actions/checkout@v4

      # Step 2: Set up Java (for Maven or Gradle build)
      - uses: actions/setup-java@v3
        name: Set up JDK 17
        with:
          java-version: '17'
          distribution: 'temurin'
          cache: maven

      # Step 3: Build the application using Maven (or Gradle)
      - name: Build the application (Maven)
        run: |
          mvn -B clean package -DskipTests  # Adjust based on your build tool, e.g., 'mvn package'

      # Step 4: Set up Docker Buildx for building the Docker image
      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v2

      # Step 5: Set up Python environment for installing Ansible
      - name: Set up Python
        uses: actions/setup-python@v2
        with:
          python-version: '3.x'

      # Step 6: Install Ansible and AWS modules (boto3) for EC2 interaction
      - name: Install Ansible and AWS modules
        run: |
          python -m pip install --upgrade pip
          pip install ansible boto3

      # Step 7: Build Docker image from the Dockerfile
      - name: Build Docker image
        run: |
          docker build -t ${{ secrets.ECR_REPOSITORY }}:${{ github.sha }} .
          # Tagging the image with the commit SHA for uniqueness

      # Step 8: Configure AWS credentials for interaction with AWS services (ECR)
      - name: Configure AWS credentials
        uses: aws-actions/configure-aws-credentials@v1
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: ${{ secrets.AWS_REGION }}

      # Step 9: Log in to Amazon ECR
      - name: Log in to Amazon ECR
        id: login-ecr
        uses: aws-actions/amazon-ecr-login@v1
        with:
          registry-type: private  # Optional, if using a private registry

      # Step 10: Define ECR Registry and tag the Docker image
      - name: Set ECR_REGISTRY and Tag Image
        run: |
          echo "ECR_REGISTRY=${{ secrets.AWS_ACCOUNT_ID }}.dkr.ecr.${{ secrets.AWS_REGION }}.amazonaws.com" >> $GITHUB_ENV
          echo "IMAGE_TAG=${{ github.sha }}" >> $GITHUB_ENV

      # Step 11: Tag and push Docker image to ECR
      - name: Build, tag, and push image to Amazon ECR
        run: |
          # Tagging the local image with the ECR repository name
          docker tag ${{ secrets.ECR_REPOSITORY }}:${{ github.sha }} $ECR_REGISTRY/
          docker push $ECR_REGISTRY/${{ secrets.ECR_REPOSITORY }}:${{ github.sha }}
          echo "image=$ECR_REGISTRY/${{ secrets.ECR_REPOSITORY }}:${{ github.sha }}" >> $GITHUB_OUTPUT



      # Step 12: Run the Ansible Playbook to deploy the Docker container on EC2 instance
      - name: Run Ansible Playbook
        env:
          ANSIBLE_HOST_KEY_CHECKING: 'False'
        run: |
          ansible-playbook -i inventory.ini .github/ansible/deploy.yml
